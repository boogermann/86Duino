


FFTW-WISDOM(1)                 fftw                FFTW-WISDOM(1)


NNAAMMEE
       fftw-wisdom - create wisdom (pre-optimized FFTs)

SSYYNNOOPPSSIISS
       ffffttww--wwiissddoomm [_O_P_T_I_O_N]... [_S_I_Z_E]...

DDEESSCCRRIIPPTTIIOONN
       _f_f_t_w_-_w_i_s_d_o_m  is  a  utility to generate FFTW wwiissddoomm files,
       which contain saved information  about  how  to  optimally
       compute  (Fourier) transforms of various sizes.  FFTW is a
       free library to compute discrete Fourier transforms in one
       or  more dimensions, for arbitrary sizes, and of both real
       and complex data, among other  related  operations.   More
       information  on  FFTW  can be found at the FFTW home page:
       _h_t_t_p_:_/_/_w_w_w_._f_f_t_w_._o_r_g

       Programs using FFTW can be written to load wisdom from  an
       arbitrary  file, string, or other source.  Moreover, it is
       likely that many FFTW-using programs will load the  ssyysstteemm
       wwiissddoomm  file,  which  is stored in _/_e_t_c_/_f_f_t_w_/_w_i_s_d_o_m (or in
       _/_d_e_v_/_e_n_v_/_D_J_D_I_R_/_e_t_c_/_f_f_t_w_/_w_i_s_d_o_m  on   DJGPP   systems)   by
       default.  _f_f_t_w_-_w_i_s_d_o_m can be used to create or add to such
       wisdom files.  In its most typical usage, the wisdom  file
       can  be  created to pre-plan a canonical set of sizes (see
       below) via:

                      fftw-wisdom -v -c -o wisdom

       (this will take many hours, which can be limited by the --tt
       option)  and the output _w_i_s_d_o_m file can then be copied (as
       root) to _/_e_t_c_/_f_f_t_w_/  (or  to  _/_d_e_v_/_e_n_v_/_D_J_D_I_R_/_e_t_c_/_f_f_t_w_/  on
       DJGPP systems) or whatever.

       The   _f_f_t_w_-_w_i_s_d_o_m   program  normally  writes  the  wisdom
       directly to standard output, but this can be  changed  via
       the --oo option, as in the example above.

       If   the   system   wisdom   file   _/_e_t_c_/_f_f_t_w_/_w_i_s_d_o_m   (or
       _/_d_e_v_/_e_n_v_/_D_J_D_I_R_/_e_t_c_/_f_f_t_w_/_w_i_s_d_o_m on DJGPP  systems)  already
       exists,   then  _f_f_t_w_-_w_i_s_d_o_m  reads  this  existing  wisdom
       (unless the --nn option is specified) and outputs  both  the
       old  wisdom and any newly created wisdom.  In this way, it
       can be used to add new transform  sizes  to  the  existing
       system  wisdom (or other wisdom file, with the --ww option).

SSPPEECCIIFFYYIINNGG SSIIZZEESS
       Although a canonical set of sizes to optimize is specified
       by  the  --cc option, the user can also specify zero or more
       non-canonical transform sizes and types to  optimize,  via
       the  _S_I_Z_E  arguments following the option flags.  Alterna-
       tively, the sizes to optimize can be  read  from  standard
       input (whitespace-separated), if a _S_I_Z_E argument of "-" is
       supplied.




fftw                      February, 2003                        1





FFTW-WISDOM(1)                 fftw                FFTW-WISDOM(1)


       Sizes are specified by the syntax:

                  <_t_y_p_e><_i_n_p_l_a_c_e><_d_i_r_e_c_t_i_o_n><_g_e_o_m_e_t_r_y>

       <_t_y_p_e> is either 'c' (complex), 'r'  (real,  r2c/c2r),  or
       'k'  (r2r, per-dimension kinds, specified in the geometry,
       below).

       <_i_n_p_l_a_c_e> is either 'i' (in place) or 'o' (out of  place).

       <_d_i_r_e_c_t_i_o_n>  is  either  'f'  (forward) or 'b' (backward).
       The <_d_i_r_e_c_t_i_o_n> should  be  omitted  for  'k'  transforms,
       where it is specified via the geometry instead.

       <_g_e_o_m_e_t_r_y>  is  the  size and dimensionality of the trans-
       form, where different  dimensions  are  separated  by  'x'
       (e.g.  '16x32'  for a two-dimensional 16 by 32 transform).
       In the case of 'k' transforms, the size of each  dimension
       is  followed  by  a  "type"  string,  which  can be one of
       f/b/h/e00/e01/e10/e11/o00/o01/o10/o11                  for
       R2HC/HC2R/DHT/REDFT00/.../RODFT11,     respectively,    as
       defined in the FFTW manual.

       For example, 'cif12x13x14' is a three-dimensional 12 by 13
       x 14 complex DFT operating in-place.  'rob65536' is a one-
       dimensional size-65536 out-of-place complex-to-real (back-
       wards)  transform  operating  on  Hermitian-symmety input.
       'ki10hx20e01' is a two-dimensional 10 by 20 r2r  transform
       where  the  first dimension is a DHT and the second dimen-
       sion is an REDFT01 (DCT-III).


OOPPTTIIOONNSS
       --hh, ----hheellpp
              Display help on the command-line options and usage.

       --VV, ----vveerrssiioonn
              Print the version number and copyright information.

       --vv, ----vveerrbboossee
              Verbose output.  (You  can  specify  this  multiple
              times, or supply a numeric argument greater than 1,
              to increase the verbosity level.)   Note  that  the
              verbose output will be mixed with the wisdom output
              (making it impossible to import), unless you  write
              the wisdom to a file via the --oo option.

       --cc, ----ccaannoonniiccaall
              Optimize/pre-plan  a  canonical  set  of sizes: all
              powers of two and ten up to 2^20 (1048576), includ-
              ing  both  real and complex, forward and backwards,
              in-place   and   out-of-place   transforms.    Also
              includes  two-  and three-dimensional transforms of
              equal-size dimensions (e.g. 16x16x16).



fftw                      February, 2003                        2





FFTW-WISDOM(1)                 fftw                FFTW-WISDOM(1)


       --tt _h_o_u_r_s, ----ttiimmee--lliimmiitt=_h_o_u_r_s
              Stop after a time of  _h_o_u_r_s  (hours)  has  elapsed,
              outputting  accumulated  wisdom.  (The problems are
              planned in increasing order of size.)  Defaults  to
              0, indicating no time limit.

       --oo _f_i_l_e, ----oouuttppuutt--ffiillee=_f_i_l_e
              Send  wisdom output to _f_i_l_e rather than to standard
              output (the default).

       --mm, ----mmeeaassuurree; --ee, ----eessttiimmaattee; --xx, ----eexxhhaauussttiivvee
              Normally, _f_f_t_w_-_w_i_s_d_o_m creates plans in FFTW_PATIENT
              mode,  but  with  these options you can instead use
              FFTW_MEASURE,  FFTW_ESTIMATE,  or   FFTW_EXHAUSTIVE
              modes, respectively, as described in more detail by
              the FFTW manual.

              Note  that  wisdom  is  tagged  with  the  planning
              patience level, and a single file can mix different
              levels of wisdom  (e.g.  you  can  mostly  use  the
              patient  default,  but  plan  a  few sizes that you
              especially care about in ----eexxhhaauussttiivvee mode).

       --nn, ----nnoo--ssyysstteemm--wwiissddoomm
              Do not import the system wisdom from _/_e_t_c_/_f_f_t_w_/_w_i_s_-
              _d_o_m   (or  from  _/_d_e_v_/_e_n_v_/_D_J_D_I_R_/_e_t_c_/_f_f_t_w_/_w_i_s_d_o_m  on
              DJGPP systems) (which is normally read by default).

       --ww _f_i_l_e, ----wwiissddoomm--ffiillee=_f_i_l_e
              Import  wisdom from _f_i_l_e (in addition to the system
              wisdom, unless --nn is specified).   Multiple  wisdom
              files can be read via multiple --ww options.  If _f_i_l_e
              is "-", then read wisdom from standard input.

BBUUGGSS
       Send bug reports to fftw@fftw.org.

AAUUTTHHOORRSS
       Written by Steven G. Johnson and Matteo Frigo.

       Copyright (c) 2003, 2006 Matteo Frigo
       Copyright (c) 2003, 2006 Massachusetts Institute of  Tech-
       nology

SSEEEE AALLSSOO
       fftw-wisdom-to-conf(1)











fftw                      February, 2003                        3




































































